{"version":3,"sources":["App.js","config/global.js","serviceWorker.js","index.js"],"names":["database","FIREBASE_CONFIG","apiKey","process","authDomain","databaseURL","storageBucket","DEFAULT_CONFIG","name","color","InitDialog","userConfig","setUserConfig","useState","open","setOpen","Dialog","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","margin","value","label","fullWidth","onChange","e","target","FormControl","InputLabel","Select","MenuItem","DialogActions","Button","onClick","disabled","EmojiPicker","show","setShowEmojiPicker","onEmojiClick","onClose","disableAutoFocus","skinTone","SKIN_TONE_MEDIUM_DARK","groupNames","smileys_people","App","setValue","message","setMessage","showEmojiPicker","userName","onSubmit","push","user","msg","time","Date","getTime","formatTime","date","month","getMonth","day","getDate","hh","getHours","mm","getMinutes","ss","getSeconds","useEffect","firebase","initializeApp","ref","on","snapshot","msgValue","val","state","element","document","querySelector","scrollTop","scrollHeight","updateScroll","displayMsg","map","idx","Message","key","formatDisplay","Container","event","emojiObject","emoji","DisplayContainer","DisplayContent","data-display","ActionContainer","UserName","Input","onKeyPress","preventDefault","stopPropagation","width","styled","div","input","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.9b36a467.chunk.js","sourcesContent":["import React, { useState, useEffect }  from 'react';\nimport styled from 'styled-components';\nimport firebase from \"firebase/app\";\nimport 'firebase/database';\n\nimport Button from '@material-ui/core/Button';\nimport Picker, { SKIN_TONE_MEDIUM_DARK } from 'emoji-picker-react';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nimport { FIREBASE_CONFIG } from './config/global';\n\nlet database;\nconst DEFAULT_CONFIG = {\n    name: '',\n    color: 'black'\n};\nconst InitDialog = ({ userConfig, setUserConfig }) => {\n    const [open, setOpen] = useState(true);\n    const { name, color } = userConfig;\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    return (\n        <Dialog open={open}>\n            <DialogTitle>Who are you?</DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                Please input your name before chatting.\n                </DialogContentText>\n                <TextField\n                    autoFocus\n                    margin=\"dense\"\n                    value={name}\n                    label=\"User Name\"\n                    fullWidth\n                    onChange={(e) => { setUserConfig({ ...userConfig, name: e.target.value }) }}\n                />\n                <FormControl>\n                    <InputLabel>Choose a color</InputLabel>\n                    <Select\n                        value={color}\n                        onChange={(e) => { setUserConfig({ ...userConfig, color: e.target.value }) }}\n                    >\n                        <MenuItem value=\"black\">Color: Black</MenuItem>\n                        <MenuItem value=\"blue\">Color: Blue</MenuItem>\n                        <MenuItem value=\"red\">Color: Red</MenuItem>\n                        <MenuItem value=\"green\">Color: Green</MenuItem>\n                    </Select>\n                </FormControl>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleClose} color=\"primary\" disabled={!name}>\n                    Confirm\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n};\n\nconst EmojiPicker = ({ show, setShowEmojiPicker, onEmojiClick }) => {\n    const onClose = ()=> { setShowEmojiPicker(false) };\n    return (\n        <Dialog open={show} onClose={onClose}>\n            <DialogContent>\n                <Picker\n                    onEmojiClick={onEmojiClick}\n                    disableAutoFocus={true} \n                    skinTone={SKIN_TONE_MEDIUM_DARK}\n                    groupNames={{smileys_people:\"PEOPLE\"}}\n                />              \n            </DialogContent>\n            <DialogActions>\n                <Button onClick={onClose} color=\"primary\">\n                    Close\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nfunction App() {\n    const [value, setValue] = useState('');\n    const [userConfig, setUserConfig] = useState(DEFAULT_CONFIG);\n    const [message, setMessage] = useState([]);\n    const [showEmojiPicker, setShowEmojiPicker] = useState(false);\n    \n    const { name:userName, color } = userConfig;\n\n    const onInputValue = (e) => {\n        const { value } = e.target;\n        setValue(value);\n    };\n\n    const onSubmit = () => {\n        database.push({\n            user: userName,\n            msg: value,\n            time: (new Date().getTime())\n        });\n        setValue('');\n    };\n\n\n    const onKeyPress = (event) => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            event.stopPropagation();\n            onSubmit();\n        }\n    }\n\n    const onEmojiClick = (event, emojiObject) => {\n        setValue(state => state + emojiObject.emoji);\n    }\n\n    const formatDisplay = (message) => {\n        return message.map((msgValue, idx) => {\n            const { time, msg, user } = msgValue;\n            const message = `${user}(${formatTime(time)}): ${msg}`\n            return <Message color={user === userName ? color : 'black'} key={idx}>{message}</Message>\n        });\n    };\n\n    const updateScroll = () => {\n        var element = document.querySelector('[data-display=\"DISPLAY_AREA\"]');\n        element.scrollTop = element.scrollHeight;\n    };\n\n    const formatTime = (time) => {\n        const date = new Date(time);\n        const month = date.getMonth() + 1;\n        const day = date.getDate();\n        const hh = date.getHours();\n        const mm = date.getMinutes();\n        const ss = date.getSeconds();\n        return `${month}-${day} ${hh}:${mm}:${ss}`;\n    };\n\n    useEffect(() => {\n        firebase.initializeApp(FIREBASE_CONFIG);\n        database = firebase.database().ref('message/');\n        database.on('child_added', function(snapshot) {\n            const msgValue = snapshot.val();\n            setMessage(state => [...state, msgValue]);\n        });\n    }, []);\n\n    useEffect(() => {\n        updateScroll();\n    }, [message]);\n\n    const displayMsg = formatDisplay(message);\n\n    return (\n        <Container>\n            <InitDialog userConfig={userConfig} setUserConfig={setUserConfig} />\n            <EmojiPicker show={showEmojiPicker} setShowEmojiPicker={setShowEmojiPicker} onEmojiClick={onEmojiClick} />\n            <DisplayContainer>\n                <DisplayContent data-display=\"DISPLAY_AREA\">{displayMsg}</DisplayContent>\n                <ActionContainer>\n                    <UserName>User: {userName}</UserName>\n                    <Input onChange={onInputValue} onKeyPress={onKeyPress} value={value} width={75} disabled={!userName}/>\n                    <Button onClick={() => { setShowEmojiPicker(true) }}>😀</Button>\n                    <Button onClick={onSubmit} color=\"primary\">Submit</Button>\n                </ActionContainer>\n            </DisplayContainer>\n        </Container>\n    );\n}\n\nexport default App;\n\nexport const Container = styled.div`\n    display: flex;\n    justify-content: center;\n`;\n\nexport const DisplayContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    min-width: 300px;\n    padding: 10px;\n`;\n\nexport const ActionContainer = styled.div`\n    display: flex;\n`;\n\nexport const Message = styled.div`\n    padding: 5px;\n    color: ${({ color }) => color}\n`;\n\nexport const UserName = styled.div`\n    width: 150px;\n`;\n\nexport const DisplayContent = styled.div`\n    height: 85vh;\n    overflow-y: auto;\n    padding: 10px;\n    border: 1px black solid;\n`;\n\nexport const Input = styled.input`\n    height: 25px;\n    width: ${({ width }) => width}vw;\n`;\n","export const FIREBASE_CONFIG = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: `${process.env.REACT_APP_FIREBASE_ID}.firebaseapp.com`,\n    databaseURL: `https://${process.env.REACT_APP_FIREBASE_ID}.firebaseio.com`,\n    storageBucket: \"bucket.appspot.com\"\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}